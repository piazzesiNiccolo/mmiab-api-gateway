openapi: 3.0.1
info:
  title: API Gateway service API endpoints
  description: API Gateway from Message in a Bottle with Microservices
  version: "0.1"
servers:
- url: /


paths:
###################### Home ###########################
  /:
    get:
      tags: [ Home ]
      summary: Return the home page of the web app
      responses:
        200:
          description: Renders the index.html template

###################### Authentication ###########################

  /login:
    tags: [ Authentication ]
    get:
      summary: Shows the login page and its form
      responses:
        200:
          description: Renders the login.html template
    post:
      summary: Handles the login of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: Reloads the login.html page with a warning, in case the user credentials were invalid
        302:
          description: Redirects to the correct profile page, depending on the type of the user

  /relogin:
    get:
      tags: [ Authentication ]
      summary: Utility route used to handle the user's session expiration
      responses:
        200:
          description: Calls the login method
  
  /logout:
    get:
      tags: [ Authentication ]
      summary: Logs out the logged user
      responses:
        302:
          description: Redirects to the homepage

###################### Messages ###########################
  
  /message/{id}/delete:
    get:
      tags: [ Message ]
      summary: Lets a recipient to delete a read message
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page with received messages

  /draft/{id}/delete:
    get:
      tags: [ Message ]
      summary: Lets a user to delete a draft
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page with drafts of the user

  /message/{id}/withdraw:
    get:
      tags: [ Message ]
      summary: Lets a user to withdraw an already sent and not arrived 
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page with sent messages

  /message/{id}/forward:
    get:
      tags: [ Message ]
      summary: Lets a user to forward a sent or received message
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page to edit a draft with the forwarded message

  /message/{id}/reply:
    get:
      tags: [ Message ]
      summary: Lets a user to reply to the specified message with a new draft
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page to create a draft

  /message/{id}/send:
    get:
      tags: [ Message ]
      summary: Lets a user to send a draft
      parameters:
      - name: id
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        302:
          description: Redirects to the page showing sent messages

  /message/{id_mess}/read:
    get:
      tags: [ Message ]
      summary: Lets a user to read the selected message
      parameters:
      - name: id_mess
        in: path
        description: Message's unique identifier
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Renders the messages previousy selected

  /message/list/sent:
    get:
      tags: [ Message ]
      summary: Return list 
      parameters:
      - name: y
        in: query
        description: year identifier
        schema:
          type: integer
          format: int64
      - name: m
        in: query
        description: month identifier
        schema:
          type: integer
          format: int64
      - name: d
        in: query
        description: day identifier
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Renders a template showing sent messages

  /message/list/received:
    get:
      tags: [ Message ]
      summary: Return list 
      parameters:
      - name: y
        in: query
        description: year identifier
        schema:
          type: integer
          format: int64
      - name: m
        in: query
        description: month identifier
        schema:
          type: integer
          format: int64
      - name: d
        in: query
        description: day identifier
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Renders a template showing received messages

  /timeline:
    get:
      tags: [ Message ]
      summary: Return list 
      parameters:
      - name: y
        in: query
        description: year identifier
        schema:
          type: integer
          format: int64
      - name: m
        in: query
        description: month identifier
        schema:
          type: integer
          format: int64
      responses:
          200:
            description: Renders a template showing a monthly timeline

  /message/list/draft:
    get:
      tags: [ Message ]
      summary: Return list 
      responses:
        200:
          description: Renders a template showing drafts for the current user

  /draft:
    get:
      summary: renders a template that lets the user to create a new draft
      parameters:
        - in: query
          name: reply_to
          description: identifier of the message to reply to
          schema:
            type: integer
            format: int64

###################### Users ###########################

  /user/{id}:
    get:
      tags: [ User ]
      summary: Shows the profile page of the user specified by the id
      parameters:
      - name: id
        in: path
        description: Customer's unique identifier
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Renders the customer_profile template, filled with the infos from the user's profile

  /profile:
    get:
      tags: [ User ]
      summary: Shows the profile page of the current user
      responses:
        302:
          description: Redirects to the profile page for the authenticated user
    
  /profile/update:
    get:
      tags: [ User ]
      summary: This method allows to retrieve the edit profile page for an existing user
      responses:
        200:
          description: Renders the create_user template, already filled with the fiels for the user's existing data

    post:
      summary: Updates the fields for the logged user
      tags: [ User ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        302:
          description: Redirects to the user profile page

  /users:
    get:
      tags: [ User ]
      summary: This method allows to retrieve the list of all existing users
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: search users with the keyword specified
      responses:
        200:
          description: Renders the users_list template, containing basic infos about all users

  /create_user:
    get:
      tags: [ User ]
      summary: This method allows to retrieve the sign up page for a new user
      responses:
        200:
          description: Renders the create_user template, filled with the fiels for the user's data
    post:
      summary: Add a new user
      tags: [ User ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        302:
          description: Redirects to the correct profile page, depending on the type of the user
  
  /user/{id}/delete:
    get:
      tags: [ User ]
      description: Delete the logged user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: the identifier of the user to delete
      responses:
        302:
          description: User deleted, it redirects to the index page

  /blacklist:
    get:
      tags: [ User ]
      description: Shows blacklist for the current user
      responses:
        200:
          description: Renders the blacklist template, showing the list of blocked users for the current user

  /blacklist/{id}/add:
    get:
      tags: [ User ]
      description: Adds the user identified by id to the blacklist of the current user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: add user with specified id to blacklist
      responses:
        302:
          description: User added to blacklist, it redirects to the blacklist page

  /blacklist/{id}/remove:
    get:
      tags: [ User ]
      description: Removes the user identified by id from the blacklist of the current user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: remove user with specified id from blacklist
      responses:
        302:
          description: User removed from blacklist, it redirects to the blacklist page
  
  /content_filter:
    get:
      tags: [ User ]
      description: Enable content filter for the current user
      responses:
        302:
          description: Content filter on/off, it redirects to user profile page

  /report/{id}:
    get:
      tags: [ User ]
      description: Lets the current user to report the user identified by the id parameter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: The id of the user to report
      responses:
        302:
          description: Redirect to the profile page if the report went well, to the home page otherwise

  /recipients:
    get:
      tags: [ User ]
      description: Returns a json containing infos about available recipients for the current user
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: a string to filter recipients
      responses:
        200:
          description: Returns a json with infos about recipients
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    anyOf:
                      - type: integer
                        format: int64
                      - type: string


################################# Components #########################################3
components:
  schemas:
    User:
      required:
        - first_name
        - last_name
        - password
        - email
        - birthdate
        - phone
      type: object
      properties:
        first_name:
          type: string
          description: First name of user
          example: Mario
        last_name:
          type: string
          description: Last name of user
          example: Rossi
        nickname:
          type: string
          description: Nickname of user
          example: '_mariorossi_'
        location:
          type: string
          description: Place of user
          example: Pisa
        profile_picture:
          type: string
          description: Path of user profile picture
          example: 'default.png'
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
        birthdate:
          type: string
          description: User birthdate
          example: '2020-01-01'
          format: date
        phone:
          type: string
          description: User phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
    UpdateUser:
      required:
        - email
        - phone
      type: object
      properties:
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
        phone:
          type: string
          description: Customer phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25
